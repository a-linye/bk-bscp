// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TencentBlueKing/bk-bscp/pkg/dal/table"
)

func newBizHost(db *gorm.DB, opts ...gen.DOOption) bizHost {
	_bizHost := bizHost{}

	_bizHost.bizHostDo.UseDB(db, opts...)
	_bizHost.bizHostDo.UseModel(&table.BizHost{})

	tableName := _bizHost.bizHostDo.TableName()
	_bizHost.ALL = field.NewAsterisk(tableName)
	_bizHost.BizID = field.NewInt(tableName, "biz_id")
	_bizHost.HostID = field.NewInt(tableName, "host_id")
	_bizHost.AgentID = field.NewString(tableName, "agent_id")
	_bizHost.LastUpdated = field.NewTime(tableName, "last_updated")

	_bizHost.fillFieldMap()

	return _bizHost
}

type bizHost struct {
	bizHostDo bizHostDo

	ALL         field.Asterisk
	BizID       field.Int
	HostID      field.Int
	AgentID     field.String
	LastUpdated field.Time

	fieldMap map[string]field.Expr
}

func (b bizHost) Table(newTableName string) *bizHost {
	b.bizHostDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bizHost) As(alias string) *bizHost {
	b.bizHostDo.DO = *(b.bizHostDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bizHost) updateTableName(table string) *bizHost {
	b.ALL = field.NewAsterisk(table)
	b.BizID = field.NewInt(table, "biz_id")
	b.HostID = field.NewInt(table, "host_id")
	b.AgentID = field.NewString(table, "agent_id")
	b.LastUpdated = field.NewTime(table, "last_updated")

	b.fillFieldMap()

	return b
}

func (b *bizHost) WithContext(ctx context.Context) IBizHostDo { return b.bizHostDo.WithContext(ctx) }

func (b bizHost) TableName() string { return b.bizHostDo.TableName() }

func (b bizHost) Alias() string { return b.bizHostDo.Alias() }

func (b bizHost) Columns(cols ...field.Expr) gen.Columns { return b.bizHostDo.Columns(cols...) }

func (b *bizHost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bizHost) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["biz_id"] = b.BizID
	b.fieldMap["host_id"] = b.HostID
	b.fieldMap["agent_id"] = b.AgentID
	b.fieldMap["last_updated"] = b.LastUpdated
}

func (b bizHost) clone(db *gorm.DB) bizHost {
	b.bizHostDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bizHost) replaceDB(db *gorm.DB) bizHost {
	b.bizHostDo.ReplaceDB(db)
	return b
}

type bizHostDo struct{ gen.DO }

type IBizHostDo interface {
	gen.SubQuery
	Debug() IBizHostDo
	WithContext(ctx context.Context) IBizHostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBizHostDo
	WriteDB() IBizHostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBizHostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBizHostDo
	Not(conds ...gen.Condition) IBizHostDo
	Or(conds ...gen.Condition) IBizHostDo
	Select(conds ...field.Expr) IBizHostDo
	Where(conds ...gen.Condition) IBizHostDo
	Order(conds ...field.Expr) IBizHostDo
	Distinct(cols ...field.Expr) IBizHostDo
	Omit(cols ...field.Expr) IBizHostDo
	Join(table schema.Tabler, on ...field.Expr) IBizHostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBizHostDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBizHostDo
	Group(cols ...field.Expr) IBizHostDo
	Having(conds ...gen.Condition) IBizHostDo
	Limit(limit int) IBizHostDo
	Offset(offset int) IBizHostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBizHostDo
	Unscoped() IBizHostDo
	Create(values ...*table.BizHost) error
	CreateInBatches(values []*table.BizHost, batchSize int) error
	Save(values ...*table.BizHost) error
	First() (*table.BizHost, error)
	Take() (*table.BizHost, error)
	Last() (*table.BizHost, error)
	Find() ([]*table.BizHost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.BizHost, err error)
	FindInBatches(result *[]*table.BizHost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*table.BizHost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBizHostDo
	Assign(attrs ...field.AssignExpr) IBizHostDo
	Joins(fields ...field.RelationField) IBizHostDo
	Preload(fields ...field.RelationField) IBizHostDo
	FirstOrInit() (*table.BizHost, error)
	FirstOrCreate() (*table.BizHost, error)
	FindByPage(offset int, limit int) (result []*table.BizHost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBizHostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bizHostDo) Debug() IBizHostDo {
	return b.withDO(b.DO.Debug())
}

func (b bizHostDo) WithContext(ctx context.Context) IBizHostDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bizHostDo) ReadDB() IBizHostDo {
	return b.Clauses(dbresolver.Read)
}

func (b bizHostDo) WriteDB() IBizHostDo {
	return b.Clauses(dbresolver.Write)
}

func (b bizHostDo) Session(config *gorm.Session) IBizHostDo {
	return b.withDO(b.DO.Session(config))
}

func (b bizHostDo) Clauses(conds ...clause.Expression) IBizHostDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bizHostDo) Returning(value interface{}, columns ...string) IBizHostDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bizHostDo) Not(conds ...gen.Condition) IBizHostDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bizHostDo) Or(conds ...gen.Condition) IBizHostDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bizHostDo) Select(conds ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bizHostDo) Where(conds ...gen.Condition) IBizHostDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bizHostDo) Order(conds ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bizHostDo) Distinct(cols ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bizHostDo) Omit(cols ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bizHostDo) Join(table schema.Tabler, on ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bizHostDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bizHostDo) RightJoin(table schema.Tabler, on ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bizHostDo) Group(cols ...field.Expr) IBizHostDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bizHostDo) Having(conds ...gen.Condition) IBizHostDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bizHostDo) Limit(limit int) IBizHostDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bizHostDo) Offset(offset int) IBizHostDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bizHostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBizHostDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bizHostDo) Unscoped() IBizHostDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bizHostDo) Create(values ...*table.BizHost) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bizHostDo) CreateInBatches(values []*table.BizHost, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bizHostDo) Save(values ...*table.BizHost) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bizHostDo) First() (*table.BizHost, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*table.BizHost), nil
	}
}

func (b bizHostDo) Take() (*table.BizHost, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*table.BizHost), nil
	}
}

func (b bizHostDo) Last() (*table.BizHost, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*table.BizHost), nil
	}
}

func (b bizHostDo) Find() ([]*table.BizHost, error) {
	result, err := b.DO.Find()
	return result.([]*table.BizHost), err
}

func (b bizHostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*table.BizHost, err error) {
	buf := make([]*table.BizHost, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bizHostDo) FindInBatches(result *[]*table.BizHost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bizHostDo) Attrs(attrs ...field.AssignExpr) IBizHostDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bizHostDo) Assign(attrs ...field.AssignExpr) IBizHostDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bizHostDo) Joins(fields ...field.RelationField) IBizHostDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bizHostDo) Preload(fields ...field.RelationField) IBizHostDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bizHostDo) FirstOrInit() (*table.BizHost, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*table.BizHost), nil
	}
}

func (b bizHostDo) FirstOrCreate() (*table.BizHost, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*table.BizHost), nil
	}
}

func (b bizHostDo) FindByPage(offset int, limit int) (result []*table.BizHost, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bizHostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bizHostDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bizHostDo) Delete(models ...*table.BizHost) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bizHostDo) withDO(do gen.Dao) *bizHostDo {
	b.DO = *do.(*gen.DO)
	return b
}
